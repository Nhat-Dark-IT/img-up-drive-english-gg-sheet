# .github/workflows/vocabulary_automation.yml
name: Vocabulary Processing Automation

on:
  schedule:
    - cron: '0 */3 * * *'  # Every 30 minutes
  workflow_dispatch:  # Manual trigger

jobs:
  process-vocabulary:
    runs-on: ubuntu-latest
    timeout-minutes: 120  # Prevent hanging jobs

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4  # Latest version

      - name: Set up Python
        uses: actions/setup-python@v5  # Latest version
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Create directories
        run: |
          mkdir -p credentials
          mkdir -p logs
          mkdir -p temp
          chmod -R 777 temp logs

      - name: Install Tesseract
        run: |
          sudo apt-get update
          sudo apt-get install -y tesseract-ocr tesseract-ocr-eng tesseract-ocr-vie
          tesseract --version

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        
      - name: Download VnCoreNLP
        run: |
          wget https://raw.githubusercontent.com/vncorenlp/VnCoreNLP/master/VnCoreNLP-1.1.1.jar
          chmod +x VnCoreNLP-1.1.1.jar

        # .github/workflows/vocabulary_automation.yml
      - name: Set up credentials
        run: |
            # Tạo file credentials.json với nội dung được escape đúng
            echo '${{ secrets.GOOGLE_CREDENTIALS }}' > credentials/credentials.json
            # Kiểm tra nội dung file
            cat credentials/credentials.json
            # Thiết lập các biến môi trường khác
            echo "GOOGLE_DRIVE_FOLDER_ID=${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}" >> .env
            echo "GOOGLE_SHEETS_ID=${{ secrets.GOOGLE_SHEETS_ID }}" >> .env
            echo "TESSERACT_PATH=/usr/bin/tesseract" >> .env
            echo "API_KEY_GEMINI=${{ secrets.API_KEY_GEMINI }}" >> .env
        
      - name: Set permissions
        run: chmod 600 credentials/credentials.json
        
      - name: Verify credentials
        run: |
            python -c "
            import json
            with open('credentials/credentials.json') as f:
                json.load(f)
            print('✓ Credentials JSON is valid')
            "
      - name: Run automation script
        id: run-script
        run: |
          python main.py
        env:
          GOOGLE_APPLICATION_CREDENTIALS: credentials/credentials.json
        continue-on-error: true

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4  # Updated to v4
        with:
          name: processing-logs-${{ github.run_number }}
          path: |
            logs/
            temp/
          retention-days: 7
          compression-level: 9  # Maximum compression
          overwrite: true

      - name: Cleanup
        if: always()
        run: |
          rm -rf temp/*
          rm -rf credentials/*